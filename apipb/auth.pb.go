// Code generated by protoc-gen-go.
// source: auth.proto
// DO NOT EDIT!

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// User represents a user
type User struct {
	Email    string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

// AuthResponse represents the response for the method
type AuthResponse struct {
	Email string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Token string `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
}

func (m *AuthResponse) Reset()                    { *m = AuthResponse{} }
func (m *AuthResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthResponse) ProtoMessage()               {}
func (*AuthResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func init() {
	proto.RegisterType((*User)(nil), "api.User")
	proto.RegisterType((*AuthResponse)(nil), "api.AuthResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for AuthService service

type AuthServiceClient interface {
	SignUp(ctx context.Context, in *User, opts ...grpc.CallOption) (*AuthResponse, error)
	SignIn(ctx context.Context, in *User, opts ...grpc.CallOption) (*AuthResponse, error)
	Reset(ctx context.Context, in *User, opts ...grpc.CallOption) (*AuthResponse, error)
}

type authServiceClient struct {
	cc *grpc.ClientConn
}

func NewAuthServiceClient(cc *grpc.ClientConn) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) SignUp(ctx context.Context, in *User, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := grpc.Invoke(ctx, "/api.AuthService/SignUp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SignIn(ctx context.Context, in *User, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := grpc.Invoke(ctx, "/api.AuthService/SignIn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Reset(ctx context.Context, in *User, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := grpc.Invoke(ctx, "/api.AuthService/Reset", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthService service

type AuthServiceServer interface {
	SignUp(context.Context, *User) (*AuthResponse, error)
	SignIn(context.Context, *User) (*AuthResponse, error)
	Reset(context.Context, *User) (*AuthResponse, error)
}

func RegisterAuthServiceServer(s *grpc.Server, srv AuthServiceServer) {
	s.RegisterService(&_AuthService_serviceDesc, srv)
}

func _AuthService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(AuthServiceServer).SignUp(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _AuthService_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(AuthServiceServer).SignIn(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _AuthService_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(AuthServiceServer).Reset(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _AuthService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUp",
			Handler:    _AuthService_SignUp_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _AuthService_SignIn_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _AuthService_Reset_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor1 = []byte{
	// 188 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x2c, 0x2d, 0xc9,
	0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c, 0xc8, 0x54, 0xf2, 0xe1, 0x62, 0x09,
	0x2d, 0x4e, 0x2d, 0x12, 0x12, 0xe1, 0x62, 0x4d, 0xcd, 0x4d, 0xcc, 0xcc, 0x91, 0x60, 0x54, 0x60,
	0xd4, 0xe0, 0x0c, 0x82, 0x70, 0x84, 0x84, 0xb8, 0x58, 0xf2, 0x12, 0x73, 0x53, 0x25, 0x98, 0xc0,
	0x82, 0x60, 0xb6, 0x90, 0x14, 0x17, 0x47, 0x41, 0x62, 0x71, 0x71, 0x79, 0x7e, 0x51, 0x8a, 0x04,
	0x33, 0x58, 0x1c, 0xce, 0x57, 0xf2, 0xe3, 0xe2, 0x71, 0x04, 0x5a, 0x10, 0x94, 0x5a, 0x5c, 0x90,
	0x9f, 0x57, 0x9c, 0x4a, 0x82, 0xa9, 0x40, 0x95, 0x25, 0xf9, 0xd9, 0xa9, 0x79, 0x50, 0x23, 0x21,
	0x1c, 0xa3, 0x2e, 0x46, 0x2e, 0x6e, 0x90, 0x81, 0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x42,
	0x1a, 0x5c, 0x6c, 0xc1, 0x99, 0xe9, 0x79, 0xa1, 0x05, 0x42, 0x9c, 0x7a, 0x40, 0xd7, 0xeb, 0x81,
	0x9c, 0x2e, 0x25, 0x08, 0x66, 0x22, 0xdb, 0xab, 0xc4, 0x00, 0x53, 0xe9, 0x99, 0x47, 0x50, 0xa5,
	0x3a, 0x17, 0x2b, 0x90, 0x97, 0x5a, 0x42, 0x48, 0x61, 0x12, 0x1b, 0x38, 0xd8, 0x8c, 0x01, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x5a, 0x8b, 0x4c, 0x3c, 0x44, 0x01, 0x00, 0x00,
}
